brew install coreutils
brew install dvdrtools
brew install qemu

http://www.cs.bham.ac.uk/~exr/lectures/opsys/10_11/lectures/os-dev.pdf
http://www.cs.vu.nl/~herbertb/misc/basickernel.pdf

qemu-system-x86_64 bootsector.bin

bios loads to 0x7c00


x86 starts in 16 bit real mode, which needs to use the segment registers to address more than 64k mem
a physical address is generated by (segment register *0x10) + address.
There are diff seg registers for diff things CS,DS,SS,ES,FS,GS. Some opcodes use certain segment registers.

e.g
mov bx, 0x7c0
mov ds, bx ; can't assign ds directly
mov al, [0xa] ; actually loads value at physical address (0x7c0 * 0x10) + 0xa (ie 0x7c0a)


reading from disk w BIOS (Real Mode only) is int 0x13 with ah 0x02
coords are DCHS (Drive, Cylinder, Head, Sector)
AH = 02h
AL = number of sectors to read (must be nonzero)
CH = low eight bits of cylinder number
CL = sector number 1-63 (bits 0-5)
     high two bits of cylinder (bits 6-7, hard disk only)
DH = head number
DL = drive number (bit 7 set for hard disk)
ES:BX -> data buffer


DEBUG BOOTING QEMU WITH GDB!
qemu-system-x86_64 -s -S bootsector.bin
gdb
target remote localhost:1234
set architecture i8086 (for REAL MODE)
b *0x7c00
c
x/i $eip
si

objdump
gobjdump -D -M intel -b binary -mi386 -Maddr16,data16 bin/bootsector.bin

//TIPS
EAX - Accumlator Register. Primary purpose: Math calculations
EBX - Base Address Register. Primary purpose: Indirectly access memory through a base address.
ECX - Counter Register. Primary purpose: Use in counting and looping.
EDX - Data Register. Primary purpose: um... store data. Yep, thats about it :)